/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIs;

import Beans.Sales;
import Beans.SalesBreakdown;
import Beans.Staff;
import Beans.StaffDepartment;
import Model.DBConnection;
import static UIs.StaffInThisDepartment.department;
import Utils.PrinterHandle;
import Utils.PrinterHandle.BillPrintable;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Emmanuel Nzekwe
 */
public class DepartmentScreen extends javax.swing.JPanel {

    private DBConnection dbConnection = null;
    protected static DefaultTableModel deptTM, staffTM;
    private ArrayList<StaffDepartment> staffDepartments;
    private ArrayList<Staff> staff;
    
    
    /**
     * Creates new form AllOrders
     */
    public DepartmentScreen() {
        initComponents();
        
        dbConnection = new DBConnection();
        deptTM = (DefaultTableModel) departmentDisplayTable.getModel();
        staffTM = (DefaultTableModel) staffDisplayTable.getModel();
        
        updateDepartmentTable();
        
    }
    
    //populate department table
    public void updateDepartmentTable(){
        deptTM.setRowCount(0);
        staffDepartments = dbConnection.getDepartments();
        populateDepartmentTable(staffDepartments);
    }

    //method to populate the department table
    protected static void populateDepartmentTable(ArrayList<StaffDepartment> staffDepartments) {
        for (int index = 0; index < staffDepartments.size(); index++) {

            int departmentID = staffDepartments.get(index).getDeptID();
            String departmentName = staffDepartments.get(index).getDepartment();

            insertIntoDepartmentTable(departmentID, departmentName);
        }
    }

    //method to populate the staff table
    protected static void populateStaffTable(ArrayList<Staff> staff) {
        for (int index = 0; index < staff.size(); index++) {

            int staffID = staff.get(index).getId();
            String firstName = staff.get(index).getFirstName();
            String lastName = staff.get(index).getLastName();
            String phone = staff.get(index).getPhone();
            String email = staff.get(index).getEmail();
            String department = staff.get(index).getDepartment();
            String username = staff.get(index).getUsername();
            String password = staff.get(index).getPassword();
            String userStatus = staff.get(index).getStatus();
                    
            insertIntoStaffTable(staffID + "", firstName, lastName);
        }
    }

    //populate department table
    protected static void insertIntoDepartmentTable(int deptID, String department) {
        String[] rowData = {deptID + "", department};
        deptTM.addRow(rowData);
    }

    //populate staff table
    protected static void insertIntoStaffTable(String id, String firstName, String lastName) {
        String[] rowData = {id, firstName, lastName};
        staffTM.addRow(rowData);
    }

    //populate staff table
    protected static void insertIntoStaffTable(String id, String firstName, String lastName, String department, String phone, String email, String username, String password, String status) {
        String[] rowData = {id, firstName, lastName, department, phone, email, username, password, status};
        staffTM.addRow(rowData);
    }
    
    //get details of selected department from table
    public StaffDepartment getSelectedDepartmentDetail(){
            int departmentID = Integer.parseInt(departmentDisplayTable.getValueAt(departmentDisplayTable.getSelectedRow(), 0).toString());
            String departmentName = departmentDisplayTable.getValueAt(departmentDisplayTable.getSelectedRow(), 1).toString();
            
            StaffDepartment department = new StaffDepartment(departmentID, departmentName);
            
            return  department;
    }
    
    //clear fields
    public void clearFields(){
        departmentIdDisplay.setText("");
        departmentNameDisplay.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showFullStaffButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        departmentDisplayTable = new javax.swing.JTable();
        insertNewDepartmentButton = new javax.swing.JButton();
        editDepartmentButton = new javax.swing.JButton();
        deleteDepartmentButton = new javax.swing.JButton();
        departmentNameDisplay = new javax.swing.JTextField();
        departmentIdDisplay = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        staffDisplayTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 0, 29));
        setLayout(null);

        showFullStaffButton.setBackground(new java.awt.Color(51, 0, 51));
        showFullStaffButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        showFullStaffButton.setForeground(new java.awt.Color(255, 255, 255));
        showFullStaffButton.setText("Show full Staff list in this category");
        showFullStaffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFullStaffButtonActionPerformed(evt);
            }
        });
        add(showFullStaffButton);
        showFullStaffButton.setBounds(41, 611, 358, 43);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("< Staff in the selected department >");
        add(jLabel3);
        jLabel3.setBounds(814, 217, 244, 32);

        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        departmentDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Department Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        departmentDisplayTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                departmentDisplayTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(departmentDisplayTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(41, 251, 358, 348);

        insertNewDepartmentButton.setBackground(new java.awt.Color(0, 51, 0));
        insertNewDepartmentButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        insertNewDepartmentButton.setForeground(new java.awt.Color(255, 255, 255));
        insertNewDepartmentButton.setText("New");
        insertNewDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertNewDepartmentButtonActionPerformed(evt);
            }
        });
        add(insertNewDepartmentButton);
        insertNewDepartmentButton.setBounds(41, 197, 117, 43);

        editDepartmentButton.setBackground(new java.awt.Color(0, 102, 102));
        editDepartmentButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        editDepartmentButton.setForeground(new java.awt.Color(255, 255, 255));
        editDepartmentButton.setText("Edit");
        editDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDepartmentButtonActionPerformed(evt);
            }
        });
        add(editDepartmentButton);
        editDepartmentButton.setBounds(164, 197, 122, 43);

        deleteDepartmentButton.setBackground(new java.awt.Color(153, 0, 0));
        deleteDepartmentButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteDepartmentButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteDepartmentButton.setText("Delete");
        deleteDepartmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDepartmentButtonActionPerformed(evt);
            }
        });
        add(deleteDepartmentButton);
        deleteDepartmentButton.setBounds(296, 197, 103, 43);

        departmentNameDisplay.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        departmentNameDisplay.setEnabled(false);
        departmentNameDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentNameDisplayActionPerformed(evt);
            }
        });
        add(departmentNameDisplay);
        departmentNameDisplay.setBounds(158, 93, 243, 38);

        departmentIdDisplay.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        departmentIdDisplay.setEnabled(false);
        add(departmentIdDisplay);
        departmentIdDisplay.setBounds(158, 49, 126, 38);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Dept. Name:");
        add(jLabel2);
        jLabel2.setBounds(41, 93, 99, 38);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("ID:");
        add(jLabel1);
        jLabel1.setBounds(41, 49, 99, 38);

        jScrollPane3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        staffDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        staffDisplayTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staffDisplayTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(staffDisplayTable);

        add(jScrollPane3);
        jScrollPane3.setBounds(417, 251, 641, 349);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDepartmentButtonActionPerformed
        if(departmentDisplayTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "No department selected.", "message", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            int deleteOption = JOptionPane.showConfirmDialog(this, "Do You Really Want To Delete This Department?", "Delete Product", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if(deleteOption == JOptionPane.YES_OPTION){
                int departmentID = Integer.parseInt(departmentDisplayTable.getValueAt(departmentDisplayTable.getSelectedRow(), 0).toString());
                dbConnection.deleteDepartment(departmentID);
                
                deptTM.setRowCount(0);
                staffDepartments = dbConnection.getDepartments();
                populateDepartmentTable(staffDepartments);
                clearFields();
                JOptionPane.showMessageDialog(this, "Department Successfully Deleted.", "Message",JOptionPane.INFORMATION_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_deleteDepartmentButtonActionPerformed

    private void editDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDepartmentButtonActionPerformed
        if(departmentDisplayTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "No department selected.", "message", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            UpdateDepartment.department = getSelectedDepartmentDetail();
            new UpdateDepartment(null, true).setVisible(true);
        }
    }//GEN-LAST:event_editDepartmentButtonActionPerformed

    private void departmentDisplayTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_departmentDisplayTableMouseClicked
        //get the selected customer details
        int departmentID = Integer.parseInt(departmentDisplayTable.getValueAt(departmentDisplayTable.getSelectedRow(), 0).toString());
        String departmentName = departmentDisplayTable.getValueAt(departmentDisplayTable.getSelectedRow(), 1).toString();

        //display details on display fields
        departmentIdDisplay.setText(departmentID +"");
        departmentNameDisplay.setText(departmentName);

        staff = dbConnection.getStaffInThisDepartment(departmentID);
        staffTM.setRowCount(0);
        populateStaffTable(staff);
        
        StaffInThisDepartment.department = departmentName;     //set category title in products in this category
        
    }//GEN-LAST:event_departmentDisplayTableMouseClicked

    private void showFullStaffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFullStaffButtonActionPerformed
        if(departmentDisplayTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(this, "No department selected.", "message", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            if(staff.isEmpty()){
                JOptionPane.showMessageDialog(this, "No Staff in selected department.", "message", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            StaffInThisDepartment.staff = staff;
            new StaffInThisDepartment(null, true).setVisible(true);
        }
                        
    }//GEN-LAST:event_showFullStaffButtonActionPerformed

    private void departmentNameDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentNameDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_departmentNameDisplayActionPerformed

    private void staffDisplayTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffDisplayTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_staffDisplayTableMouseClicked

    private void insertNewDepartmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertNewDepartmentButtonActionPerformed
        new AddNewDepartment(null, true).setVisible(true);
    }//GEN-LAST:event_insertNewDepartmentButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteDepartmentButton;
    private javax.swing.JTable departmentDisplayTable;
    private javax.swing.JTextField departmentIdDisplay;
    private javax.swing.JTextField departmentNameDisplay;
    private javax.swing.JButton editDepartmentButton;
    private javax.swing.JButton insertNewDepartmentButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton showFullStaffButton;
    private javax.swing.JTable staffDisplayTable;
    // End of variables declaration//GEN-END:variables
}
